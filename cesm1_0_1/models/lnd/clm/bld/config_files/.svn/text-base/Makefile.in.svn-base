#-----------------------------------------------------------------------
# Makefile template for building CLM on various platforms.
#
# This makefile assumes the existence the file:
#
# Filepath      The directories, listed one per line, that contain the source
#               code required to build CLM.  This list is used to set the
#               VPATH variable which is used by GNU make to search for
#               dependencies (after it looks in the directory from which
#               it was invoked).  This list of directories, prepended with ./,
#               is also used to construct the list of search directories 
#               used by the preprocessor (as specified by -I command-line options).
#
# The following macros are set by CLM's configure script.  They should only be hand edited
# by experts.
#
# UNAMES        Result of the "uname -s" command on the target platform.
# ROOTDIR       Root directory for the CLM source distribution.
# EXENAME       Name of the executable.
# MODEL_EXEDIR  Directory to build the executable in.
# INC_NETCDF    Directory containing the NetCDF include files.
# LIB_NETCDF    Directory containing the NetCDF library.
# MOD_NETCDF    Directory containing the NetCDF module files.
# INC_MPI       Directory containing the MPI include files.
# LIB_MPI       Directory containing the MPI library.
# MPI_LIB_NAME  Name of MPI library.
# ESMF_LIBDIR   Directory containing the ESMF library (for use with external library only).
# DEBUG         Set to TRUE to turn on compiler debugging options.  Default: FALSE 
# SPMD          Whether to build in SPMD mode or not. 	[values TRUE FALSE]
# SMP           Set to TRUE to enable building in SMP mode (uses OpenMP).  
# USER_FC       Allow user to override the default Fortran compiler specified in Makefile.
# USER_CC       Allow user to override the default C compiler specified in Makefile (linux only).
# USER_LINKER   Allow user to override the default linker specified in Makefile.
# USER_CPPDEFS  Additional CPP defines.
# USER_CFLAGS   Additional C compiler flags that the user wishes to set.
# USER_FFLAGS   Additional Fortran compiler flags that the user wishes to set.
# USER_LDLAGS   Additional load flags that the user wishes to set.
# F_OPTIMIZATION_OVERRIDE
#               Use this to replace default Fortran compiler optimization.  
#
# Note: An internal implementation of the ESMF time-manager interface is provided
#       with the sequential CCSM distribution in src/utils/esmf_wrf_timemgr.
#
#------------------------------------------------------------------------

# Set up special characters
null  :=
space := $(null) $(null)
comma := $(null),$(null)

# Initialize macros that allow a user override.
# *** N.B. *** Only the Linux architure observes the override for FC and CC.

# Set user specified Fortran compiler
ifneq ($(strip $(USER_FC)),)
  FC := $(USER_FC)
endif
# Set user override of default Fortran compiler optimizations
ifneq ($(strip $(F_OPTIMIZATION_OVERRIDE)),)
  FORTRAN_OPTIMIZATION := $(F_OPTIMIZATION_OVERRIDE)
endif
# Set user specified C compiler
ifneq ($(strip $(USER_CC)),)
  CC := $(USER_CC)
endif
# Set user specified linker
ifneq ($(strip $(USER_LINKER)),)
  LINKER := $(USER_LINKER)
endif

# Load dependency search path.
dirs := . $(shell cat Filepath)

# Set cpp search path, include netcdf
cpp_dirs := $(dirs) $(INC_NETCDF) $(INC_MPI)
cpp_path := $(foreach dir,$(cpp_dirs),-I$(dir)) # format for command line

# Expand any tildes in directory names. Change spaces to colons.
VPATH    := $(foreach dir,$(cpp_dirs),$(wildcard $(dir))) 
VPATH    := $(subst $(space),:,$(VPATH))               

#------------------------------------------------------------------------
# Primary target: build the model
#------------------------------------------------------------------------
all: $(MODEL_EXEDIR)/$(EXENAME)

# Get list of files and build dependency file for all .o files
#   using perl scripts mkSrcfiles and mkDepends

SOURCES   := $(shell cat Srcfiles)

# Newer makes set the CURDIR variable.
CURDIR := $(shell pwd)

$(CURDIR)/Depends: $(CURDIR)/Srcfiles $(CURDIR)/Filepath
	$(ROOTDIR)/../../../scripts/ccsm_utils/Build/mkDepends Filepath Srcfiles > $@

$(CURDIR)/Srcfiles: $(CURDIR)/Filepath
	$(ROOTDIR)/../../../scripts/ccsm_utils/Build/mkSrcfiles > $@

OBJS      := $(addsuffix .o, $(basename $(SOURCES)))

CPPDEF    := $(USER_CPPDEFS)
LDFLAGS   := 
ifeq ($(SPMD),TRUE)
   CPPDEF += -DSPMD
endif

$(MODEL_EXEDIR)/$(EXENAME): $(OBJS)
	$(LINKER) -o $@ $(OBJS) -L$(LIB_NETCDF) -lnetcdf $(LDFLAGS)


# Compilation rules:
.SUFFIXES:
.SUFFIXES: .F .F90 .c .s .o

.F.o:
	$(FC) -c $(FIXEDFLAGS) $(FFLAGS) $<

.F90.o:
	$(FC) -c $(FREEFLAGS) $(FFLAGS) $<

.c.o:
	$(CC) -c $(CFLAGS) $<

.s.o:
	$(AS) -m  $<

# Rules used for the tests run by "configure -test"
test_fc: test_fc.o
	$(LINKER) -o $@ test_fc.o $(LDFLAGS)
test_nc: test_nc.o
	$(LINKER) -o $@ test_nc.o -L$(LIB_NETCDF) -lnetcdf $(LDFLAGS)
test_mpi: test_mpi.o
	$(LINKER) -o $@ test_mpi.o $(LDFLAGS)
test_esmf: test_esmf.o
	$(LINKER) -o $@ test_esmf.o $(LDFLAGS)


debug: $(OBJS)
	echo "FC: $(FC)"
	echo "FFLAGS: $(FFLAGS)"
	echo "LINKER: $(LINKER)"
	echo "LDFLAGS: $(LDFLAGS)"
	echo "OBJS: $(OBJS)"

#------------------------------------------------------------------------
# AIX
#------------------------------------------------------------------------

ifeq ($(UNAMES),AIX)

CPPDEF     += -DAIX
ifeq ($(SMP),TRUE)
  # THREADED_OMP is used by the timing library
  CPPDEF   += -DTHREADED_OMP
endif

# Use the thread-safe compilers even when disabling openMP.
ifeq ($(SPMD),TRUE)
  FC       := mpxlf90_r
else
  FC       := xlf90_r
endif

cpre = $(null)-WF,-D$(null)
FPPFLAGS   := $(patsubst -D%,$(cpre)%,$(CPPDEF))

CC         := mpcc_r
CFLAGS     := -q64 -I/usr/include $(cpp_path) $(CPPDEF) -O2
mod_path   := -I$(MOD_NETCDF)
FFLAGS     := -q64 -I/usr/include $(cpp_path) $(mod_path) $(FPPFLAGS) -qarch=auto -g -qfullpath 
FREEFLAGS  := -qsuffix=f=f90:cpp=F90
FIXEDFLAGS := -qfixed=132

ifeq ($(DEBUG),TRUE)
  CPPDEFS += -DNO_SHR_VMATH
  # Bounds checking is unreliable on the IBM.
  # Sometimes you can get it to go if you turn threading off (by deleting -qsmp=omp)
  # Only turn float-trapping on for debug mode as it's a 20% performance hit.
  FFLAGS += -qinitauto=7FF7FFFF -qflttrap=ov:zero:inv:en -qspillsize=4000 -C -O0
  # As of Apr/15/2003 cam2_0_2_dev18 xlfrte8.1.0.3 using -lmass causes the code to core-dump
  # when using DEBUG compiler options.
  LDFLAGS += -q64 -lmassv
else
  # Check for override of default Fortran compiler optimizations
  ifeq ($(F_OPTIMIZATION_OVERRIDE),$(null))
    # Inline when not debugging
    FORTRAN_OPTIMIZATION := -O2 -qstrict -Q
  endif
  FFLAGS += $(FORTRAN_OPTIMIZATION) -qsigtrap=xl__trcedump
  LDFLAGS += -q64 -lmass -lmassv
endif

ifeq ($(SMP),TRUE)
  FFLAGS  += -qsmp=omp:noopt
  LDFLAGS += -qsmp=omp:noopt
endif

ifeq ($(SPMD),TRUE)
  LDFLAGS += -lmpi_r
else
  FFLAGS  += -WF,-DHIDE_MPI,-D_MPISERIAL
endif

LDFLAGS += -bdatapsize:64K -bstackpsize:64K -btextpsize:64K

endif

#------------------------------------------------------------------------
# Linux
#------------------------------------------------------------------------

ifeq ($(UNAMES),Linux)

CPPDEF += -DLINUX

# Set the default Fortran compiler
ifeq ($(strip $(USER_FC)),)
  FC := pgf90
endif

# Decide whether or not a PGI Fortran compiler is being used by looking
# for a match of the string 'pgf' in the compiler name.
PGI_FC := FALSE
PGI_CC := FALSE
ifeq ($(findstring pgf,$(FC)),pgf)
  PGI_FC := TRUE
endif
# On Cray XT3, ftn is a wrapper for pgf90 (and cc is a wrapper for pgcc)
ifeq ($(findstring ftn,$(FC)),ftn)
  PGI_FC := TRUE
  USER_CC := cc
  PGI_CC := TRUE
  USER_LDFLAGS += -time -Wl,--allow-multiple-definition -Mnosecond_underscore
  USER_FFLAGS  += -Mnosecond_underscore
endif

# Set the C compiler (default: pgcc if using PGI Fortran compiler, cc otherwise)
# and cc if not
ifeq ($(USER_CC),$(null))
  ifeq ($(PGI_FC),TRUE)
    CC := pgcc
  else
    CC := cc
  endif
else
  CC := $(USER_CC)
endif
# Decide whether or not a PGI cc compiler is being used by looking
# for a match of the string 'pgc' in the compiler name.
ifeq ($(findstring pgc,$(CC)),pgc)
  PGI_CC := TRUE
endif

ifeq ($(SMP),TRUE)
  # THREADED_OMP and THREADED_PTHREADS are used by the timing library
  ifeq ($(PGI_CC),TRUE)
    CPPDEF += -DTHREADED_OMP
  else
    CPPDEF += -DTHREADED_PTHREADS
  endif
endif

CFLAGS = $(cpp_path) $(CPPDEF)
FFLAGS = $(cpp_path) $(mod_path) $(CPPDEF)
ifeq ($(findstring ftn,$(FC)),ftn)
  CFLAGS += -DFORTRANUNDERSCORE -target=linux -gopt -DCATAMOUNT -Mlist -time -Kieee
  FFLAGS += -time -target=linux -gopt
else
  ifeq ($(PGI_CC),TRUE)
    CFLAGS += -fast
  endif
endif

# Set search path for module files for external libraries.
mod_path  := -I$(MOD_NETCDF)

# pgf90

ifeq ($(PGI_FC),TRUE)

  FFLAGS     += -i4 -Mdalign -Mextend -Kieee -byteswapio -Mflushz -Mlist
  FREEFLAGS  := -Mfree
  FIXEDFLAGS :=

  ifeq ($(DEBUG),TRUE)
    FFLAGS   += -g -Ktrap=fp -Mrecursive -Mbounds
  else
    # Check for override of default Fortran compiler optimizations
    ifeq ($(F_OPTIMIZATION_OVERRIDE),$(null))
      FORTRAN_OPTIMIZATION := -fast -Mvect=nosse 
    endif
    FFLAGS   += $(FORTRAN_OPTIMIZATION)
  endif

  ifeq ($(SMP),TRUE)
    FFLAGS   += -mp
    LDFLAGS  += -mp
  endif

endif

# lf95

ifeq ($(FC),lf95)

  FFLAGS      += --wide
  SPEC_FFLAGS := $(FFLAGS)
  FREEFLAGS   :=
  FIXEDFLAGS  :=

  ifeq ($(DEBUG),TRUE)
    # --trace produces a call traceback on abort
    # --trap causes code to stop on divide by zero or overflow exceptions
    # --pca prevents overwriting constant arguments
    # --chk for basic compiler checking (a,e,s,u,x)
    #TBH:  this works    FFLAGS += -g --chk --pca
    #TBH:  this FAILS    FFLAGS += -g --chk a,e,s,u,x --pca
    FFLAGS    += -g --chk a,e,s,u --pca --trace --trap
  else
    # Check for override of default Fortran compiler optimizations
    ifeq ($(F_OPTIMIZATION_OVERRIDE),$(null))
      FORTRAN_OPTIMIZATION := -O
    endif
    FFLAGS    += $(FORTRAN_OPTIMIZATION)
  endif
  # Threading only works by putting thread memory on the heap rather than the stack (--threadheap).
  # As of lf95 version 6.2 the thread stacksize limits are (still) too small to run even small
  # resolution problems (FV at 10x15 res fails).
  ifeq ($(SMP),TRUE)
    FFLAGS  += --openmp --threadheap 4096
    CFLAGS  += -fstack-check
    LDFLAGS += --openmp --threadheap 4096
  endif

endif

ifeq ($(findstring ifort,$(FC)),ifort)

  FFLAGS      += -ftz -g -fp-model precise -convert big_endian -assume byterecl -traceback
  FREEFLAGS   := -FR
  FIXEDFLAGS  := -132

  ifeq ($(DEBUG),TRUE)
    FFLAGS    += -check all -fpe0
  else
    # Check for override of default Fortran compiler optimizations
    ifeq ($(F_OPTIMIZATION_OVERRIDE),$(null))
      FORTRAN_OPTIMIZATION := -O2
    endif
    FFLAGS    += $(FORTRAN_OPTIMIZATION)
  endif

  ifeq ($(SMP),TRUE)
    FFLAGS    += -openmp
    CFLAGS    += -openmp
    LDFLAGS   += -openmp
  endif
  LDFLAGS   += -m64

  ifeq ($(USER_CC),$(null))
    CC := icc
  endif

endif

ifeq ($(findstring icc,$(CC)),icc)
  CFLAGS      += -m64 -ftz -g
endif

# pathf90

ifeq ($(FC),pathf90)

  CC         := pathcc
  FFLAGS     += -extend_source -ftpp -fno-second-underscore
  FREEFLAGS  :=
  FIXEDFLAGS :=

  ifeq ($(SMP),TRUE)
    FFLAGS   += -mp
    LDFLAGS  += -mp
  endif

  ifeq ($(DEBUG),TRUE)
    FFLAGS   += -trapuv -Wuninitialized -g
  else
    # Check for override of default Fortran compiler optimizations
    ifeq ($(F_OPTIMIZATION_OVERRIDE),$(null))
      FORTRAN_OPTIMIZATION := -O
    endif
    FFLAGS   += $(FORTRAN_OPTIMIZATION)
  endif


endif

# g95

ifeq ($(FC),g95)

  CPPDEF     += -DG95 -DDISABLE_TIMERS -DNO_CRAY_POINTERS
  FFLAGS     += -i4 -fno-second-underscore -fstatic  
  FREEFLAGS  := 
  FIXEDFLAGS :=

  ifeq ($(DEBUG),TRUE)
    FFLAGS   += -g -fbounds-check
  else
    # Check for override of default Fortran compiler optimizations
    ifeq ($(F_OPTIMIZATION_OVERRIDE),$(null))
      FORTRAN_OPTIMIZATION := 
    endif
    FFLAGS   += $(FORTRAN_OPTIMIZATION)
  endif

endif

# Flags common to all compilers

ifeq ($(SPMD),TRUE)
  ifneq ($(LIB_MPI),$(null))
     LDFLAGS += -L$(LIB_MPI) -l$(MPI_LIB_NAME)
  endif
endif

endif

#------------------------------------------------------------------------
# Darwin XLF compiler (serial only, no MPI multi-tasking or OpenMP threading)
#------------------------------------------------------------------------

ifeq ($(UNAMES),Darwin)

CPPDEF     += -DDarwin -DNO_SHR_VMATH

mod_path   := -I$(MOD_NETCDF)

# Set the default Fortran compiler
ifeq ($(strip $(USER_FC)),)
  FC := g95
endif
ifeq ($(strip $(USER_CC)),)
  CC := gcc
endif

ifeq ($(FC),g95)
   CPPDEF   += -DG95
   FFLAGS   := -fno-underscoring $(CPPDEF) $(cpp_path) -I$(MOD_NETCDF) -I$(INC_NETCDF)
   ifeq ($(DEBUG),TRUE)
     FFLAGS += -g -fbounds-check
   else
     # Check for override of default Fortran compiler optimizations
     ifeq ($(F_OPTIMIZATION_OVERRIDE),$(null))
       FORTRAN_OPTIMIZATION := -O2
     endif
     FFLAGS += $(FORTRAN_OPTIMIZATION)
   endif

endif

ifeq ($(FC),gfortran)
   CPPDEF   += -DG95
   FFLAGS   := -fno-underscoring $(CPPDEF) $(cpp_path) -I$(MOD_NETCDF) -I$(INC_NETCDF) \
	      -fno-range-check
   ifeq ($(DEBUG),TRUE)
     FFLAGS += -g -fbounds-check
   else
     # Check for override of default Fortran compiler optimizations
     ifeq ($(F_OPTIMIZATION_OVERRIDE),$(null))
       FORTRAN_OPTIMIZATION := -O2
     endif
     FFLAGS += $(FORTRAN_OPTIMIZATION)
   endif

endif

ifeq ($(CC),gcc)
   CFLAGS     := $(cpp_path) -O2 $(CPPDEF) -I/Developer/SDKs/MacOSX10.4.0.sdk/usr/include/malloc
endif

LDFLAGS    += -lSystemStubs -lSystemStubs_profile

ifeq ($(SMP),TRUE)
  # SMP not implemented
  FFLAGS  +=
  LDFLAGS +=
endif

ifeq ($(SPMD),TRUE)
  # SPMD not implemented
  LDFLAGS +=
endif

gptl.o: gptl.c
	$(CC) -c -I/usr/include -I/usr/include/malloc $(CPPDEF) -O2 $<

endif

#------------------------------------------------------------------------
# BGL
#------------------------------------------------------------------------

ifeq ($(UNAMES),BGL)

CPPDEF     += -DFORTRAN_SAME -DAIX -DBGL
BGLPATH=/bgl/BlueLight/ppcfloor/bglsys
cpre = $(null)-WF,-D$(null)
FPPFLAGS   := $(patsubst -D%,$(cpre)%,$(CPPDEF))

FC         := blrts_xlf90
CC         := blrts_xlc
CFLAGS     := $(cpp_path) $(CPPDEF) -O2 \
              -I$(BGLPATH)/include
mod_path   := -I$(MOD_NETCDF)
FFLAGS     := -I$(BGLPATH)/include \
               $(cpp_path) $(mod_path) $(FPPFLAGS) -qarch=440 \
		-qspillsize=2500 -g -qfullpath -qdebug=function_trace 
FREEFLAGS  := -qsuffix=f=f90:cpp=F90
FIXEDFLAGS := -qfixed=132
LDFLAGS    += -L/contrib/bgl/lib -lmass -lmassv \
              -Wl,--allow-multiple-definition \
              -L$(BGLPATH)/lib -lmpich.rts -lmsglayer.rts \
              -lrts.rts -ldevices.rts -llapack440 -lblas440 -lstackmonitor 

ifeq ($(DEBUG),TRUE)
  FFLAGS += -qinitauto=FF911299 -qflttrap=ov:zero:inv:en
else
  # Check for override of default Fortran compiler optimizations
  ifeq ($(F_OPTIMIZATION_OVERRIDE),$(null))
    # Inline when not debugging
    FORTRAN_OPTIMIZATION := -O3 -qstrict -Q
  endif
  FFLAGS += $(FORTRAN_OPTIMIZATION)
endif

endif

#------------------------------------------------------------------------

# Default linker is the Fortran compiler
ifeq ($(strip $(LINKER)),)
  LINKER := $(FC)
endif

# For compiling and linking with external ESMF.
# If linking to external ESMF library then include esmf.mk to provide the macros:
# ESMF_F90COMPILEPATHS
# ESMF_F90LINKPATHS
# ESMF_F90LINKRPATHS
# ESMF_F90ESMFLINKLIBS
ifneq ($(strip $(ESMF_LIBDIR)),)
  include $(ESMF_LIBDIR)/esmf.mk
  FFLAGS  += $(ESMF_F90COMPILEPATHS)
  LDFLAGS += $(ESMF_F90LINKPATHS) $(ESMF_F90LINKRPATHS) $(ESMF_F90ESMFLINKLIBS)
endif

# Append user defined compiler and load flags to Makefile defaults
CFLAGS   += $(USER_CFLAGS)
FFLAGS   += $(USER_FFLAGS)
LDFLAGS  += $(USER_LDFLAGS)

clean:
	rm -f Depends Srcfiles *.o *.mod *.stb *.f90 $(MODEL_EXEDIR)/$(EXENAME)

realclean: clean

include $(CURDIR)/Depends
