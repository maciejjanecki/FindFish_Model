#===============================================================================
# The following always need to be set
# USE_MPISERIAL    Whether to build and use mpiserial lib or not. [values TRUE FALSE]
# SMP              Set to TRUE to enable building in SMP mode (uses OpenMP).  
# USER_CPPDEFS     CPP definitions (non platform dependent)
#
# The following can be optionally set
# USER_LIB_MPI       Allow user to override the default 
# USER_LIB_NETCDF    Allow user to override the default 
# USER_LAPACK_LIBDIR Allow user to override the default 
# USER_ESMF_LIBDIR   Allos user to override the default
# USER_LINKER        Allow user to override the default
#
# USER_INC_MPI       Allow user to override the default 
# USER MPI_LIB_NAME  Allow user to override the default
# USER_INC_NETCDF    Allow user to override the default 
# USER_MOD_NETCDF    Allow user to override the default 
# USER_FC            Allow user to override the default Fortran compiler specified in Makefile.
# USER_CC            Allow user to override the default C compiler specified in Makefile (linux only).
# USER_CFLAGS        Additional C compiler flags that the user wishes to set.
# USER_FFLAGS        Additional Fortran compiler flags that the user wishes to set.
# USER_LDLAGS        Additional load flags that the user wishes to set.
# F_OPTIMIZATION_OVERRIDE
#                    Use this to replace default Fortran compiler optimization.  
#===============================================================================

#===============================================================================
# Set general compile options
#===============================================================================
# Makefile macros for AIX
#
# Notes:  (see xlf user's guide for the details)
#  -lmass          => IBM-tuned intrinsic lib
#  -qsmp=noauto    => enable SMP directives, but don't add any
#  -qsmp=omp       => enable SMP directives, strict omp
#  -qstrict        => don't turn divides into multiplies, etc
#  -qhot           => higher-order-transformations (eg. loop padding)
#  -qalias=noaryoverlp => assume no array overlap wrt equivalance, etc
#  -qmaxmem=-1     => memory available to compiler during optimization
#  -qipa=level=2   => InterProcedure Analysis (eg. inlining) => slow compiles
#  -p -pg          => enable profiling (use in both FFLAGS and LDFLAGS)
#  -qreport        => for smp/omp only
#  -bmaxdata:0x80000000 => use maximum allowed data segment size
#  -g              => always leave it on because overhead is minimal (?)
#  -qflttrap=...   => enable default sigtrap (core dump)
#  -C              => runtime array bounds checking (runs slow)
#  -qinitauto=...  => initializes automatic variables
#
# The following macros are set by CAM's configure script.  
# They should only be hand edited by experts.
#
# Use the thread-safe compilers even when disabling openMP.
#===============================================================================

# Note that CPPDEFS is set in Macros.cppdefs
CPPDEFS += -DAIX -DSEQ_$(FRAMEWORK) -DFORTRAN_SAME

ifeq ($(strip $(DEBUG)),TRUE)
   CPPDEFS += -DNO_SHR_VMATH
endif
ifeq ($(compile_threaded), true)
   CPPDEFS += -DTHREADED_OMP
endif

cpre = $(null)-WF,-D$(null)
FPPFLAGS := $(patsubst -D%,$(cpre)%,$(CPPDEFS)) 

ifeq ($(USE_MPISERIAL),TRUE)
  FC := xlf90_r
  CC := cc_r
else
  FC := mpxlf90_r
  CC := mpcc_r
endif
LD            := $(FC)

#=====================================================
# GENERIC_USER
# Set the netcdf and mpi paths if they are not 
# in the default environment.
# Ignore PNETCDF stuff initially, it's not required.


NETCDF_PATH   := /usr/local
INC_NETCDF    := $(NETCDF_PATH)/include
LIB_NETCDF    := $(NETCDF_PATH)/lib
MOD_NETCDF    := $(NETCDF_PATH)/include

MPI_PATH      :=
INC_MPI       := 
LIB_MPI       := 
PNETCDF_PATH  :=
LIB_PNETCDF   :=
LAPACK_LIBDIR :=
#=====================================================

CFLAGS        := $(CPPDEFS) -q64 -O2 
FIXEDFLAGS    := -qsuffix=f=f -qfixed=132
FREEFLAGS     := -qsuffix=f=f90:cpp=F90 
FFLAGS        := $(FPPFLAGS) -q64 -g -qfullpath -qmaxmem=-1 -qarch=auto -qsigtrap=xl__trcedump 
FFLAGS_NOOPT  := $(FFLAGS)
FLAGS_OPT     := -O2 -qstrict -Q
LDFLAGS       := -q64 -bdatapsize:64K -bstackpsize:64K -btextpsize:64K 
AR            := ar
MOD_SUFFIX    := mod
CONFIG_SHELL  :=

#===============================================================================
# Override with user settings
#===============================================================================

ifneq ($(strip $(USER_FC)),)
   FC := $(USER_FC)
endif
ifneq ($(strip $(USER_CC)),)
   CC := $(USER_CC)
endif
ifneq ($(strip $(USER_INC_NETCDF)),)
   INC_NETCDF := $(USER_INC_NETCDF)
endif
ifneq ($(strip $(USER_MOD_NETCDF)),)
   MOD_NETCDF := $(USER_MOD_NETCDF)  
endif
ifneq ($(strip $(USER_INC_PNETCDF)),)
   INC_PNETCDF := $(USER_INC_PNETCDF)
endif
ifneq ($(strip $(USER_INC_MPI)),)
   INC_MPI := $(USER_INC_MPI)
endif

#===============================================================================
# Set include paths (needed after override for any model specific builds below)
#===============================================================================

INCLDIR := -I. -I/usr/include
ifneq ($(strip $(INC_NETCDF)),)
  INCLDIR += -I$(INC_NETCDF)
endif
ifneq ($(strip $(MOD_NETCDF)),)
  INCLDIR += -I$(MOD_NETCDF)
endif
ifneq ($(strip $(INC_MPI)),)
  INCLDIR += -I$(INC_MPI)
endif 
ifneq ($(strip $(INC_PNETCDF)),)
  INCLDIR += -I$(INC_PNETCDF)
endif

# IBM specific update to system libraries
ifeq ($(strip $(DEBUG)),TRUE)
  SLIBS := -lmassv -lessl
else
  SLIBS := -lmass -lmassv -lessl
endif

#===============================================================================
# Set model and other specific options
# NOTE - all CPPDEFS options must be defined before this point
#===============================================================================

ifeq ($(strip $(MODEL)),cam)
   FFLAGS := $(FPPFLAGS) -q64 -g -qfullpath -qsigtrap=xl__trcedump -qarch=auto \
             -qspillsize=2500 
   ifneq ($(strip $(F_OPTIMIZATION_OVERRIDE)),)
     FLAGS_OPT := $(F_OPTIMIZATION_OVERRIDE)
   else
     FLAGS_OPT := -O2 -qstrict -Q
     ifeq ($(strip $(LIBROOT)),)
        # the following is needed for the current cam build where no separate
        # libraries are built - if clm is currently built with -O3, irreproducible
        # results occur - this should be removed once the cam adopts a build with
        # separate libraries for each component 
        FLAGS_OPT := -O2 -qstrict -Q
     endif 
   endif
   CFLAGS +=   
endif
ifeq ($(strip $(MODEL)),pop2)
   FFLAGS := $(FPPFLAGS) -q64 -g -qfullpath -qsigtrap=xl__trcedump -qarch=auto \
             -d -qmaxmem=-1 -qtune=auto -qalias=noaryovrlp -qcache=auto -qnosave 
endif
ifeq ($(strip $(MODEL)),cice)
   FFLAGS := $(FPPFLAGS) -q64 -g -qfullpath -qsigtrap=xl__trcedump -qarch=auto \
             -qmaxmem=-1 -qtune=auto 
endif

# Set flags specific to debug mode
ifeq ($(strip $(DEBUG)),TRUE)
   FFLAGS       += -qinitauto=7FF7FFFF -qflttrap=ov:zero:inv:en -qspillsize=4000
   FFLAGS_NOOPT += -qinitauto=7FF7FFFF -qflttrap=ov:zero:inv:en -qspillsize=4000
   bounds := true
   ifeq ($(strip $(MODEL)),cam)
      bounds := false	
   endif
   ifeq ($(strip $(MODEL)),clm)
      bounds := false
   endif	
   ifeq ($(bounds),true)	
      FFLAGS += -C
   endif
else
   FFLAGS += $(FLAGS_OPT)
endif

ifeq ($(strip $(compile_threaded)),true)
  FFLAGS_NOOPT += -qsmp=omp:noopt

  # -qsmp implicitly turns on -O2.  Explicitly disable this for debugging.
  ifeq ($(DEBUG),TRUE)
    FFLAGS   += -qsmp=omp:noopt
    CFLAGS   += -qsmp=omp:noopt
    LDFLAGS  += -qsmp=omp:noopt
  else
    # turn off thread optimization until impact understood  JW 09/03/2009
    # resume thread optimization due to performance hit     mvr 9/10/2009
    FFLAGS   += -qsmp=omp
    CFLAGS   += -qsmp=omp
    LDFLAGS  += -qsmp=omp
    # FFLAGS   += -qsmp=omp:noopt
    # CFLAGS   += -qsmp=omp:noopt
    # LDFLAGS  += -qsmp=omp:noopt
  endif
endif

ifeq ($(MODEL),cam)
   # These RRTMG files take an extraordinarily long time to compile with optimization.
   # Until mods are made to read the data from files, just remove optimization from
   # their compilation.
rrtmg_lw_k_g.o: rrtmg_lw_k_g.f90
	$(FC) -c $(FPPFLAGS) $(INCLDIR) $(INCS) $(FREEFLAGS) $(FFLAGS_NOOPT) $<
rrtmg_sw_k_g.o: rrtmg_sw_k_g.f90
	$(FC) -c $(FPPFLAGS) $(INCLDIR) $(INCS) $(FREEFLAGS) $(FFLAGS_NOOPT) $<
endif

CONFIG_ARGS :=

#=====================================================
# GENERIC_USER
# Options passed to the mct and pio build are set here

ifeq ($(MODEL),mct)
  #add arguments for mct configure here
  ifeq ($(USE_MPISERIAL),TRUE)
     CONFIG_ARGS= --enable-mpiserial
  endif
endif

ifeq ($(MODEL),pio)
  ifneq ($(strip $(PIO_CONFIG_OPTS)),)
    CONFIG_ARGS += $(PIO_CONFIG_OPTS)
  endif 
  CONFIG_ARGS += NETCDF_PATH=$(NETCDF_PATH) CFLAGS="$(CFLAGS)" FFLAGS="$(FFLAGS)"
  ifeq ($(USE_MPISERIAL),TRUE)
     CONFIG_ARGS += --enable-mpiserial
  endif
endif

#=====================================================

# Append user defined compiler and load flags to Makefile defaults
CFLAGS   += $(USER_CFLAGS)
FFLAGS   += $(USER_FFLAGS)
LDFLAGS  += $(USER_LDFLAGS)



