#===============================================================================
# The following always need to be set
# SPMD             Whether to build in SPMD mode or not.  [values TRUE FALSE]
# SMP              Set to TRUE to enable building in SMP mode (uses OpenMP).  
# USER_CPPDEFS     CPP definitions (non platform dependent)
#
# The following can be optionally set
# USER_LIB_MPI       Allow user to override the default 
# USER_LIB_NETCDF    Allow user to override the default 
# USER_LAPACK_LIBDIR Allow user to override the default 
# USER_ESMF_LIBDIR   Allos user to override the default
# USER_LINKER        Allow user to override the default
#
# USER_INC_MPI       Allow user to override the default 
# USER MPI_LIB_NAME  Allow user to override the default
# USER_INC_NETCDF    Allow user to override the default 
# USER_MOD_NETCDF    Allow user to override the default 
# USER_FC            Allow user to override the default Fortran compiler specified in Makefile.
# USER_CC            Allow user to override the default C compiler specified in Makefile (linux only).
# USER_CFLAGS        Additional C compiler flags that the user wishes to set.
# USER_FFLAGS        Additional Fortran compiler flags that the user wishes to set.
# USER_LDLAGS        Additional load flags that the user wishes to set.
# F_OPTIMIZATION_OVERRIDE
#                    Use this to replace default Fortran compiler optimization.  
#===============================================================================

# Note that CPPDEFS is set in Macros.cppdefs
CPPDEFS += -DLINUX -DSEQ_$(FRAMEWORK) -DFORTRANUNDERSCORE -DNO_R16 -DNO_SHR_VMATH 

ifeq ($(compile_threaded), true)
   CPPDEFS += -DTHREADED_OMP
endif

FC            := mpif90
CC            := mpicc

#=====================================================
# GENERIC_USER
# The netcdf and mpi paths need to be set somewhere.  In CCSM, this
# is normally done by setting the NETCDF_PATH and MPI_PATH
# variables in this Macros file.  But they could also be set in the 
# default user paths, by an explicit addition to the local path 
# in the env_mach_specific file, or via setting NETCDF_PATH 
# and MPI_PATH environment variables in the env_mach_specific file.  
# Also, review the relative paths of the INC_, LIB_, and MOD_ paths
# below.  Ignore PNETCDF stuff initially, it's not required.

NETCDF_PATH   := $(NETCDF)
INC_NETCDF    := $(NETCDF_PATH)/include
LIB_NETCDF    := $(NETCDF_PATH)/lib
MOD_NETCDF    := $(NETCDF_PATH)/include
MPICH_PATH    := $(MPI_ROOT)
INC_MPI       := $(MPICH_PATH)/include
LIB_MPI       := $(MPICH_PATH)/lib
MPI_LIB_NAME  :=
PNETCDF_PATH  :=
INC_PNETCDF   :=
LIB_PNETCDF   := 
LAPACK_LIBDIR := 
#=====================================================

CFLAGS        := $(CPPDEFS) 
FIXEDFLAGS    := 
FREEFLAGS     := 
FFLAGS        := $(CPPDEFS) -g -132 -fp-model precise -convert big_endian -assume byterecl -ftz -traceback
FFLAGS_NOOPT  := $(FFLAGS) -O0
FFLAGS_OPT    := -O2
LDFLAGS       := 
AR            := ar
MOD_SUFFIX    := mod
CONFIG_SHELL  :=

#===============================================================================
# Override with user settings
#===============================================================================

ifneq ($(strip $(USER_FC)),)
   FC := $(USER_FC)
endif
ifneq ($(strip $(USER_CC)),)
   CC := $(USER_CC)
endif
ifneq ($(strip $(USER_INC_NETCDF)),)
   INC_NETCDF := $(USER_INC_NETCDF)
endif
ifneq ($(strip $(USER_MOD_NETCDF)),)
   MOD_NETCDF := $(USER_MOD_NETCDF)  
endif
ifneq ($(strip $(USER_INC_PNETCDF)),)
   INC_PNETCDF := $(USER_INC_PNETCDF)
endif
ifneq ($(strip $(USER_INC_MPI)),)
   INC_MPI := $(USER_INC_MPI)
endif

#===============================================================================
# Set include paths (needed after override for any model specific builds below)
#===============================================================================

INCLDIR := -I. 
ifneq ($(strip $(INC_NETCDF)),)
INCLDIR += -I$(INC_NETCDF)
endif
ifneq ($(strip $(MOD_NETCDF)),)
INCLDIR += -I$(MOD_NETCDF)
endif
ifneq ($(strip $(INC_MPI)),)
INCLDIR += -I$(INC_MPI)
endif 
ifneq ($(strip $(INC_PNETCDF)),)
INCLDIR += -I$(INC_PNETCDF)
endif

#===============================================================================
# Set model and other specific options
# NOTE - all CPPDEFS options must be defined before this point
#===============================================================================

ifeq ($(strip $(MODEL)),cam)
  ifneq ($(strip $(F_OPTIMIZATION_OVERRIDE)),)
     FFLAGS_OPT := $(F_OPTIMIZATION_OVERRIDE)
  endif
endif

# Set user override of default Fortran compiler optimizations
ifeq ($(DEBUG),TRUE)
  FFLAGS       += -CU -check pointers -fpe0 -ftz
  FFLAGS_NOOPT += -CU -check pointers -fpe0 -ftz
else
  FFLAGS += $(FFLAGS_OPT)
endif

ifeq ($(compile_threaded), true)
  FFLAGS       += -openmp
  FFLAGS_NOOPT += -openmp
  CFLAGS       += -openmp
  LDFLAGS      += -openmp
endif

ifeq ($(strip $(MODEL)),cam)
# These RRTMG files cause a compiler error when using optimization.
# Until mods are made to read the data from files, just remove optimization from
# their compilation.
rrtmg_lw_k_g.o: rrtmg_lw_k_g.f90
	$(FC) -c $(CPPDEFS) $(INCLDIR) $(INCS) $(FREEFLAGS) $(FFLAGS_NOOPT) $<
rrtmg_sw_k_g.o: rrtmg_sw_k_g.f90
	$(FC) -c $(CPPDEFS) $(INCLDIR) $(INCS) $(FREEFLAGS) $(FFLAGS_NOOPT) $<
endif

CONFIG_ARGS :=

#=====================================================
# GENERIC_USER
# Options passed to the mct and pio build are set here

ifeq ($(MODEL),mct)
        #add arguments for mct configure here
  CONFIG_ARGS += CC="$(CC)" FC="$(FC)" F90="$(FC)" INCLUDEPATH="-I$(INC_MPI)"
endif

ifeq ($(MODEL),pio)
  ifneq ($(strip $(PIO_CONFIG_OPTS)),)
    CONFIG_ARGS += $(PIO_CONFIG_OPTS)
  endif 
  CONFIG_ARGS += CC="$(CC)" F90="$(FC)" NETCDF_PATH="$(NETCDF_PATH)" MPI_INC="-I$(INC_MPI)"
endif
#=====================================================


# Append user defined compiler and load flags to Makefile defaults
CFLAGS   += $(USER_CFLAGS)
FFLAGS   += $(USER_FFLAGS)
LDFLAGS  += $(USER_LDFLAGS)



